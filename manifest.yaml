apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
 name: letsencrypt-prod
spec:
 acme:
   server: https://acme-v02.api.letsencrypt.org/directory
   email: piotr.jp.ostrowski@gmail.com
   privateKeySecretRef:
     name: letsencrypt-prod
   solvers:
   - http01:
       ingress:
         class: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-premiere
  namespace: default
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - api.premiere.sh
      secretName: ingress-premiere-tls
  rules:
    - host: api.premiere.sh
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: premiere-api-port
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: premiere-api-port
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 5000
  selector:
    name: metadata-api
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: premiere-api
spec:
  selector:
    matchLabels:
      name: premiere-api
  replicas: 3
  template:
      metadata:
        labels:
          name: premiere-api
      spec:
        containers:
          - name: premiere-api
            image: docker.io/piotrostr/premiere
            env:
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: premiere-secrets
                    key: POSTGRES_PASSWORD
                    optional: false
              - name: POSTGRES_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: premiere-secrets
                    key: POSTGRES_USERNAME
                    optional: false
              - name: POSTGRES_HOST
                value: db
            ports:
              - containerPort: 5000
        imagePullSecrets:
          - name: regcred
        restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    name: db
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    name: db
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv
spec:
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
  labels:
    name: db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  selector:
    matchLabels:
      name: db
  replicas: 1
  template:
      metadata:
        labels:
          name: db
      spec:
        containers:
          - name: db-container
            image: postgres
            ports:
              - containerPort: 5432
            env:
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: premiere-secrets
                    key: POSTGRES_PASSWORD
                    optional: false
              - name: POSTGRES_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: premiere-secrets
                    key: POSTGRES_USERNAME
                    optional: false
              - name: PGDATA
                value: /var/lib/postgresql/data/pgdata
            volumeMounts:
              - mountPath: /var/lib/postgresql/data
                name: db-storage
        volumes:
          - name: db-storage
            persistentVolumeClaim:
              claimName: db-pvc
